// public/sw.js - Service Worker for TypeTutor
const CACHE_NAME = 'typetutor-v1.0.0';
const STATIC_CACHE = 'typetutor-static-v1.0.0';
const DYNAMIC_CACHE = 'typetutor-dynamic-v1.0.0';

// Files to cache immediately
const STATIC_ASSETS = [
  '/',
  '/index.html',
  '/manifest.json',
  '/vite.svg',
  // Add your main CSS and JS files here - these will be generated by Vite
];

// API endpoints to cache
const API_CACHE_PATTERNS = [
  /\/api\/health$/,
  /\/api\/stats$/,
];

// Install event - cache static assets
self.addEventListener('install', (event) => {
  console.log('[SW] Installing...');
  
  event.waitUntil(
    caches.open(STATIC_CACHE).then((cache) => {
      console.log('[SW] Caching static assets');
      return cache.addAll(STATIC_ASSETS);
    }).catch((error) => {
      console.error('[SW] Failed to cache static assets:', error);
    })
  );
  
  // Take control immediately
  self.skipWaiting();
});

// Activate event - clean old caches
self.addEventListener('activate', (event) => {
  console.log('[SW] Activating...');
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
            console.log('[SW] Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  
  // Take control of all clients
  self.clients.claim();
});

// Fetch event - serve from cache with network fallback
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);
  
  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }
  
  // Skip Chrome extension requests
  if (url.protocol === 'chrome-extension:') {
    return;
  }
  
  // Handle different types of requests
  if (isStaticAsset(request)) {
    event.respondWith(handleStaticAsset(request));
  } else if (isAPIRequest(request)) {
    event.respondWith(handleAPIRequest(request));
  } else if (isNavigationRequest(request)) {
    event.respondWith(handleNavigationRequest(request));
  } else {
    event.respondWith(handleOtherRequest(request));
  }
});

// Check if request is for a static asset
function isStaticAsset(request) {
  const url = new URL(request.url);
  return (
    url.pathname.match(/\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)$/) ||
    STATIC_ASSETS.includes(url.pathname)
  );
}

// Check if request is for API
function isAPIRequest(request) {
  const url = new URL(request.url);
  return url.pathname.startsWith('/api/') || 
         url.hostname.includes('typetutor-production.up.railway.app');
}

// Check if request is navigation
function isNavigationRequest(request) {
  return request.mode === 'navigate' || 
         (request.method === 'GET' && request.headers.get('accept').includes('text/html'));
}

// Handle static assets - cache first strategy
async function handleStaticAsset(request) {
  try {
    const cache = await caches.open(STATIC_CACHE);
    const cachedResponse = await cache.match(request);
    
    if (cachedResponse) {
      console.log('[SW] Serving static asset from cache:', request.url);
      return cachedResponse;
    }
    
    // Fetch from network and cache
    const networkResponse = await fetch(request);
    if (networkResponse.status === 200) {
      const responseClone = networkResponse.clone();
      cache.put(request, responseClone);
      console.log('[SW] Cached new static asset:', request.url);
    }
    
    return networkResponse;
  } catch (error) {
    console.error('[SW] Static asset error:', error);
    // Return offline fallback if available
    return caches.match('/offline.html') || new Response('Offline', { status: 503 });
  }
}

// Handle API requests - network first with cache fallback
async function handleAPIRequest(request) {
  const url = new URL(request.url);
  
  // Don't cache POST/PUT/DELETE requests
  if (request.method !== 'GET') {
    return fetch(request);
  }
  
  // Check if this API endpoint should be cached
  const shouldCache = API_CACHE_PATTERNS.some(pattern => pattern.test(url.pathname));
  
  if (!shouldCache) {
    return fetch(request);
  }
  
  try {
    // Try network first
    const networkResponse = await fetch(request, {
      headers: {
        ...request.headers,
        'Cache-Control': 'no-cache'
      }
    });
    
    if (networkResponse.status === 200) {
      // Cache successful API responses
      const cache = await caches.open(DYNAMIC_CACHE);
      const responseClone = networkResponse.clone();
      
      // Add timestamp to cached response
      const responseWithTimestamp = new Response(responseClone.body, {
        status: responseClone.status,
        statusText: responseClone.statusText,
        headers: {
          ...responseClone.headers,
          'sw-cached-at': Date.now().toString()
        }
      });
      
      cache.put(request, responseWithTimestamp);
      console.log('[SW] Cached API response:', request.url);
    }
    
    return networkResponse;
  } catch (error) {
    console.log('[SW] Network failed, trying cache for:', request.url);
    
    // Fallback to cache
    const cache = await caches.open(DYNAMIC_CACHE);
    const cachedResponse = await cache.match(request);
    
    if (cachedResponse) {
      // Check if cache is still fresh (5 minutes for stats, 1 minute for health)
      const cachedAt = cachedResponse.headers.get('sw-cached-at');
      const isStale = cachedAt && (Date.now() - parseInt(cachedAt)) > getCacheMaxAge(url.pathname);
      
      if (!isStale) {
        console.log('[SW] Serving API from cache:', request.url);
        return cachedResponse;
      } else {
        console.log('[SW] Cache is stale for:', request.url);
      }
    }
    
    // Return error response if no cache available
    return new Response(JSON.stringify({ 
      error: 'Network unavailable and no cached data',
      offline: true 
    }), {
      status: 503,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

// Handle navigation requests - serve app shell
async function handleNavigationRequest(request) {
  try {
    // Try network first
    const networkResponse = await fetch(request);
    return networkResponse;
  } catch (error) {
    console.log('[SW] Navigation network failed, serving app shell');
    
    // Fallback to cached index.html
    const cache = await caches.open(STATIC_CACHE);
    const cachedResponse = await cache.match('/index.html');
    
    return cachedResponse || new Response('App unavailable offline', {
      status: 503,
      headers: { 'Content-Type': 'text/html' }
    });
  }
}

// Handle other requests
async function handleOtherRequest(request) {
  try {
    return await fetch(request);
  } catch (error) {
    console.log('[SW] Other request failed:', request.url);
    return new Response('Resource unavailable', { status: 503 });
  }
}

// Get cache max age based on endpoint
function getCacheMaxAge(pathname) {
  if (pathname.includes('/health')) return 60 * 1000; // 1 minute
  if (pathname.includes('/stats')) return 5 * 60 * 1000; // 5 minutes
  return 10 * 60 * 1000; // 10 minutes default
}

// Background sync for failed requests
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync-stats') {
    console.log('[SW] Background sync triggered for stats');
    event.waitUntil(syncFailedRequests());
  }
});

// Sync failed stat saves
async function syncFailedRequests() {
  try {
    const cache = await caches.open('failed-requests');
    const requests = await cache.keys();
    
    for (const request of requests) {
      try {
        const response = await fetch(request);
        if (response.ok) {
          console.log('[SW] Successfully synced:', request.url);
          cache.delete(request);
        }
      } catch (error) {
        console.log('[SW] Still failed to sync:', request.url);
      }
    }
  } catch (error) {
    console.error('[SW] Background sync error:', error);
  }
}

// Handle push notifications (if needed later)
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();
    
    const options = {
      body: data.body || 'New TypeTutor notification',
      icon: '/vite.svg',
      badge: '/vite.svg',
      tag: 'typetutor-notification',
      requireInteraction: false,
      actions: [
        {
          action: 'open',
          title: 'Open TypeTutor'
        },
        {
          action: 'close',
          title: 'Dismiss'
        }
      ]
    };
    
    event.waitUntil(
      self.registration.showNotification(data.title || 'TypeTutor', options)
    );
  }
});

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  
  if (event.action === 'open' || !event.action) {
    event.waitUntil(
      clients.matchAll({ type: 'window' }).then((clientList) => {
        for (const client of clientList) {
          if (client.url.includes('typetutor') && 'focus' in client) {
            return client.focus();
          }
        }
        if (clients.openWindow) {
          return clients.openWindow('/');
        }
      })
    );
  }
});

// Message handling for communication with main app
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'GET_CACHE_STATUS') {
    getCacheStatus().then(status => {
      event.ports[0].postMessage({ type: 'CACHE_STATUS', status });
    });
  }
  
  if (event.data && event.data.type === 'CLEAR_CACHE') {
    clearAllCaches().then(() => {
      event.ports[0].postMessage({ type: 'CACHE_CLEARED' });
    });
  }
});

// Get cache status
async function getCacheStatus() {
  try {
    const cacheNames = await caches.keys();
    const status = {};
    
    for (const cacheName of cacheNames) {
      const cache = await caches.open(cacheName);
      const keys = await cache.keys();
      status[cacheName] = {
        count: keys.length,
        size: await estimateCacheSize(cache)
      };
    }
    
    return status;
  } catch (error) {
    console.error('[SW] Error getting cache status:', error);
    return {};
  }
}

// Estimate cache size
async function estimateCacheSize(cache) {
  try {
    const keys = await cache.keys();
    let totalSize = 0;
    
    for (const key of keys.slice(0, 10)) { // Sample first 10 for estimation
      const response = await cache.match(key);
      if (response) {
        const blob = await response.blob();
        totalSize += blob.size;
      }
    }
    
    // Extrapolate total size
    return Math.round((totalSize * keys.length) / Math.min(keys.length, 10));
  } catch (error) {
    return 0;
  }
}

// Clear all caches
async function clearAllCaches() {
  try {
    const cacheNames = await caches.keys();
    await Promise.all(cacheNames.map(name => caches.delete(name)));
    console.log('[SW] All caches cleared');
  } catch (error) {
    console.error('[SW] Error clearing caches:', error);
  }
}

// src/utils/serviceWorkerRegistration.js - SW registration utility
export const registerServiceWorker = () => {
  if ('serviceWorker' in navigator && import.meta.env.PROD) {
    window.addEventListener('load', async () => {
      try {
        const registration = await navigator.serviceWorker.register('/sw.js', {
          scope: '/'
        });
        
        console.log('✅ Service Worker registered:', registration.scope);
        
        // Handle updates
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          
          newWorker.addEventListener('statechange', () => {
            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
              // New content is available
              showUpdateNotification(newWorker);
            }
          });
        });
        
        // Listen for SW messages
        navigator.serviceWorker.addEventListener('message', (event) => {
          if (event.data.type === 'CACHE_STATUS') {
            console.log('Cache status:', event.data.status);
          }
        });
        
      } catch (error) {
        console.error('❌ Service Worker registration failed:', error);
      }
    });
  }
};

// Show update notification
const showUpdateNotification = (newWorker) => {
  const updateAvailable = confirm(
    'A new version of TypeTutor is available. Would you like to update now?'
  );
  
  if (updateAvailable) {
    newWorker.postMessage({ type: 'SKIP_WAITING' });
    window.location.reload();
  }
};

// Utility functions for cache management
export const cacheUtils = {
  // Get cache status
  async getCacheStatus() {
    if (!('serviceWorker' in navigator)) return null;
    
    return new Promise((resolve) => {
      const messageChannel = new MessageChannel();
      messageChannel.port1.onmessage = (event) => {
        resolve(event.data.status);
      };
      
      navigator.serviceWorker.controller?.postMessage(
        { type: 'GET_CACHE_STATUS' },
        [messageChannel.port2]
      );
    });
  },
  
  // Clear all caches
  async clearCache() {
    if (!('serviceWorker' in navigator)) return;
    
    return new Promise((resolve) => {
      const messageChannel = new MessageChannel();
      messageChannel.port1.onmessage = () => {
        resolve();
      };
      
      navigator.serviceWorker.controller?.postMessage(
        { type: 'CLEAR_CACHE' },
        [messageChannel.port2]
      );
    });
  },
  
  // Check if app is running offline
  isOffline() {
    return !navigator.onLine;
  },
  
  // Store failed request for background sync
  async storeFailedRequest(url, data) {
    if (!('serviceWorker' in navigator)) return;
    
    try {
      const cache = await caches.open('failed-requests');
      const request = new Request(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      
      await cache.put(request, new Response('pending'));
      
      // Register for background sync
      if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {
        const registration = await navigator.serviceWorker.ready;
        await registration.sync.register('background-sync-stats');
      }
    } catch (error) {
      console.error('Failed to store request for background sync:', error);
    }
  }
};

export default registerServiceWorker;